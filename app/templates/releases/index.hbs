<h1>Ember.js Releases</h1>

<p>
  Ember is committed to shipping new features without breaking your existing applications.
  You get Long Term Support (LTS) versions,
  a 6-week release cycle, and a strong commitment to <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">Semantic Versioning</a>.
</p>

<h2>Latest Release: {{this.emberReleaseProject.lastRelease}}</h2>

<p>Create an app:</p>

<div class="mb-3">
  <TerminalCode>
    npm install -g ember-cli
    <br>
    ember new my-app-name
  </TerminalCode>
</div>

<p>
  Read more about our
  <LinkTo @route="releases.lts">Long Term Support</LinkTo>,
  <LinkTo @route="releases.release">latest stable</LinkTo>,
  <LinkTo @route="releases.beta">beta</LinkTo>,
  and <LinkTo @route="releases.canary">canary</LinkTo>
  releases.
</p>

<h2>Strategy</h2>
<p>
  Ember is built by people who are at the front lines of building and upgrading their company's apps.
  They want the latest features without the burn of breaking changes, and so Ember follows
  a different release strategy than most other JavaScript tools.
</p>

<h2>Our goals</h2>
<ul>
  <li>
    Add new features in a way that doesn't break existing apps, through
    backwards compatibility and optional feature flags
  </li>
  <li>
    Maintain LTS (long term support) versions for 54 weeks, so that teams who upgrade their apps
    infrequently can keep getting security updates and bugfixes
  </li>
  <li>
    Make a minor release about every six weeks and a major release about every eighteen months, so teams that use Ember can plan their work
  </li>
  <li>
    Follow a public RFC (request for comments) process so that all users and companies
    can participate in proposing and evaluating new features
  </li>
  <li>
    Provide automated tooling for upgrades and syntax changes
  </li>
  <li>
    Only make breaking changes when we really, really have to
  </li>
  <li>
    Give developers a way to test drive the latest and greatest features, on their own terms.
  </li>
</ul>

<h2>How Ember uses SemVer</h2>
<p>
  SemVer stands for
  <a href="http://semver.org/">Semantic Versioning</a>,
  a powerful standard across the JavaScript community that helps developers understand
  which versions of a library will work in their app as-is, and which versions
  would require changes if they wanted to upgrade.
</p>

<p>
  Ember aims to ship new features in minor releases, to make breaking changes
  rare, and to make major releases predictable. Breaking changes force
  development teams to spend time researching the changes and modifying their
  codebase before they can upgrade. The bigger the codebase, or the more complex
  the app, the more time and effort it takes. Ember is committed to providing a
  better experience than that:
</p>

<ol>
  <li>
    <p>
      <strong>
        We never couple the addition of new features to breaking changes.
      </strong>
      Instead, we introduce a new feature to replace an existing feature,
      provide a migration path, then sometime later deprecate the old feature,
      and finally remove the old feature in a later major release.
    </p>
  </li>
  <li>
    <p>
      <strong>
        Ember major versions only remove deprecated features. They never
        introduce new features.
      </strong>
      This means major releases are not exciting, just a predictable point where
      some cleanup happens.
    </p>
  </li>
  <li>
    <p>
      <strong>Ember&rsquo;s big releases are <em>Editions</em>.</strong> An
      Edition lands in a minor release and is therefore always backwards
      compatible. It represents the point where all the features we shipped in
      minor releases are polished, well-documented, and recommended for everyone
      to use. <a href="https://emberjs.com/editions/">Read more here.</a>
    </p>
  </li>
</ol>


<h3>What SemVer means for your app</h3>
<p>
  What this means in practice is, if an Ember app is version 3.4, it should keep working
  as-is at version 3.8.
  Although that version has new features, everything is backwards-compatible.
  What this means is, teams can do development and refactors at their own pace,
  all while receiving security updates and the option to use new features.
</p>
<p>
  According to SemVer,
  releases are named according to a MAJOR.MINOR.PATCH scheme.
  Only MAJOR versions releases may change or remove public APIs after deprecation.
  MINOR versions may introduce new features so long as they are backwards compatible,
  and PATCH releases may include bug or security fixes.
</p>

<h3>Ecosystem tools</h3>
<p>
  There are additional considerations for our support policies for other major
  ecosystem tools, specifically <a href="https://nodejs.org/en/">Node.js</a> and
  <a href="https://www.typescriptlang.org">TypeScript</a>.
</p>

<h4>Node.js</h4>
<p>
  Ember supports current stable and <abbr title="long-term support">LTS</abbr>
  releases for Node.js. When a version of Node.js goes out of its long-term
  support window, Ember also drops support for it. <em>This is not considered a
  breaking change.</em> However, release notes will always include a notice
  when a previously supported Node version becomes unsupported because it left
  its <abbr title="long-term support">LTS</abbr> period.
</p>

<h4>TypeScript</h4>
<p>
  TypeScript sometimes makes breaking changes in its minor releases. Ember does
  its best to absorb those changes, so that you can safely upgrade Ember and
  TypeScript independently from each other. Specifically, Ember, Ember Data, and
  Ember CLI use the “rolling window” support policy defined in the latest draft
  of the <a href="https://www.semver-ts.org">Semantic Versioning for TypeScript
  Types</a> spec (which the Ember community authored specifically to address
  this problem!).
</p>
<p>
  In practice, this means you can always upgrade to the latest TypeScript
  version supported by a given Ember <abbr title="long-term support">LTS</abbr>
  release and then upgrade to the next Ember <abbr title="long-term support">LTS</abbr>
  release without needing to upgrade TypeScript again. For more details, read
  <a href="https://www.semver-ts.org">the spec</a>!
</p>